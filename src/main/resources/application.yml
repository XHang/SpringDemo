# management:context-path: 192.168.21.160
# 客户端启动的端口，同时也会告诉Eureka服务器
 server:
   port: 10086
# Eureka服务器的连接地址,前面的admin:12345@是嵌入了身份凭证，服务器可以用于身份凭证
 eureka:
   client:
# 不要试图连接Eureka服务端
      registerWithEureka: false
      fetchRegistry: false
      serviceUrl:
        defaultZone: http://localhost:8761/eureka/
# 告诉Eureka服务端这边客户端的地址
   instance:
      hostname: localhost
# 告诉服务器客户端的状态页面地址和健康页面地址，默认会补其前缀hostname，不知如何更改,如果没有补前缀的话，默认这个地址是安全链接
#      statusPageUrlPath: https://${eureka.hostname}/infopath
#      healthCheckUrlPath: https://${eureka.hostname}/healthpath
#      homePageUrl: https://${eureka.hostname}/home
# 让你的客户端只能通过https来访问。但是Eureka服务器内部的客户端主页和状态页面仍然是不安全的url
#      nonSecurePortEnabled: false
#      securePortEnabled: true
# 告诉Eureka客户端的名字，如果不指定的话会有一个默认值
 spring:
   application:
      name: ZuulServer
# 不使用Ribbon来发现微服务以及请求微服务的情况下，使用url转发的超时设置
 zuul:
  host.socket-timeout-millis: 60000
  host.connect-timeout-millis: 10000
  routes:
    game:
      path: /**/game/**
      sensitiveHeaders: 
      custom-sensitive-headers: true
#      serviceId: game
      url: http://192.168.21.160:8089
    user:
# 如果你配成/user/**这样的话，只有端口地址后面带user才可以找到映射路径,这样的配的话，只有url地址含有/user/字符即可正确映射
      path: /**/user/**
      sensitiveHeaders: 
      custom-sensitive-headers: true
#      serviceId: user
      url: http://192.168.21.160:3333
    shop:
      path: /**/shop/**
      sensitiveHeaders: 
      custom-sensitive-headers: true
#      serviceId: user
      url: http://192.168.21.160:7896
# 放在后面表示除了上面配置的路由之外，所有地址都转发到这个路由
    all:
      path: /**/*
      sensitiveHeaders: 
      custom-sensitive-headers: true
      url: http://192.168.21.160:8089
#   开启debug模式
 logging:
    level:
      com.netflix: DEBUG
# 断路器超时 60秒
 hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds:  60000
# Ribbon负载均衡超时3秒  读取超时 1分钟
 ribbon:
  ConnectTimeout: 30000
  ReadTimeout: 60000
#  禁用Eureka
  eureka:
    enabled: false